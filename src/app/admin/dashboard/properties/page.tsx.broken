'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { useAuthContext } from '@/utils/AuthContext';
import { deleteCookie } from 'cookies-next';
import Image from 'next/image';
import Link from 'next/link';
import {
    Building, Home, MessageCircle, Bell, ChevronDown,
    Plus, Pencil, Trash2, Search, Filter, ArrowUpDown,
    BedDouble, Bath, Square, MapPin, DollarSign,
    UserCircle, LogOut, ChevronUp, Settings, CreditCard,
    BarChart3, Wifi, Tv, Utensils, Coffee, Fan,
    Thermometer, Waves, Lock, Fence, Wind, Zap,
    Snowflake, Trees, Mountain, Warehouse,
    ParkingCircle, Baby, Umbrella,
    ShieldAlert, Dumbbell, Flame, Droplet, Monitor, Wrench,
    Cable, Bike, BellRing, Shirt, Dog,
    ChefHat, Sofa, Check, Lamp, Microwave, Container
} from 'lucide-react';
import { useAirbnbImport } from '@/hooks/useAirbnbImport';
import { sampleProperties, Property } from '@/data/sampleProperties';
import { normalizeAmenities, categorizeAmenities } from '@/utils/amenities-utils';
import { nanoid } from 'nanoid';
import parse from 'html-react-parser';
import dynamic from 'next/dynamic';

// Importar parse do html-react-parser com dynamic import para evitar problemas de SSR
const HTMLReactParser = dynamic(() => import('html-react-parser'), { ssr: false });

// Define the form data type
interface FormData {
    id: string;
    title: string;
    description: string;
    type: string;
    location: string;
    price: number;
    bedrooms: number;
    bathrooms: number;
    beds: number;
    guests: number;
    area: number;
    status: 'available' | 'rented' | 'maintenance';
    featured: boolean;
    images: string[];
    amenities: string[];
    categorizedAmenities: {
        [key: string]: string[];
    };
    houseRules: {
        checkIn: string;
        checkOut: string;
        maxGuests: number;
        additionalRules: string[];
    };
    safety: {
        hasCoAlarm: boolean;
        hasSmokeAlarm: boolean;
        hasCameras: boolean;
    };
    cancellationPolicy: string;
}

interface ImportProgress {
    step: number;
    total: number;
    message: string;
}

interface ImageProcessingResult {
    url: string;
    processed: boolean;
}

// Modificar o componente PropertyAmenityItem para debug e renderização correta dos SVGs
const PropertyAmenityItem = ({ amenity }: { amenity: { text: string; svgIcon?: string; category?: string } }) => {
    // Mapping de texto das comodidades para ícones do Lucide
    const getIconComponent = (amenityText: string) => {
        const text = amenityText.toLowerCase();

        // Mapeamento de termos comuns para ícones
        if (text.includes('wi-fi') || text.includes('internet') || text.includes('wifi')) return <Wifi />;
        if (text.includes('tv') || text.includes('televisão')) return <Tv />;
        if (text.includes('cozinha')) return <ChefHat />;
        if (text.includes('estacionamento') || text.includes('garage')) return <ParkingCircle />;
        if (text.includes('piscina')) return <Umbrella />;
        if (text.includes('ar-condicionado') || text.includes('ar condicionado')) return <Snowflake />;
        if (text.includes('aquecimento') || text.includes('calefação')) return <Thermometer />;
        if (text.includes('café') || text.includes('cafeteira')) return <Coffee />;
        if (text.includes('ventilador')) return <Fan />;
        if (text.includes('água quente') || text.includes('água')) return <Droplet />;
        if (text.includes('segurança') || text.includes('alarme')) return <ShieldAlert />;
        if (text.includes('varanda') || text.includes('terraço') || text.includes('quintal')) return <Trees />;
        if (text.includes('jardim')) return <Trees />;
        if (text.includes('churrasqueira') || text.includes('churrasco')) return <Flame />;
        if (text.includes('academia') || text.includes('fitness')) return <Dumbbell />;
        if (text.includes('banheiro') || text.includes('banheira')) return <Bath />;
        if (text.includes('quarto')) return <BedDouble />;
        if (text.includes('roupa de cama') || text.includes('roupa')) return <Shirt />;
        if (text.includes('chuveiro') || text.includes('ducha')) return <Droplet />;
        if (text.includes('talheres') || text.includes('louça')) return <Utensils />;
        if (text.includes('geladeira') || text.includes('refrigerador')) return <Container />;
        if (text.includes('microondas')) return <Microwave />;
        if (text.includes('sofá') || text.includes('sala')) return <Sofa />;
        if (text.includes('ferro') || text.includes('passar')) return <Wrench />;
        if (text.includes('cabos') || text.includes('plugue') || text.includes('eletricidade')) return <Cable />;
        if (text.includes('bicicleta')) return <Bike />;
        if (text.includes('detector') || text.includes('alarme') || text.includes('monóxido')) return <BellRing />;
        if (text.includes('pet') || text.includes('animais') || text.includes('cachorro')) return <Dog />;
        if (text.includes('lâmpada') || text.includes('iluminação')) return <Lamp />;
        if (text.includes('secador')) return <Wind />;
        if (text.includes('xampu') || text.includes('shampoo') || text.includes('sabonete')) return <Baby />;
        if (text.includes('vista') || text.includes('montanha')) return <Mountain />;
        if (text.includes('cobertor') || text.includes('travesseiro')) return <Shirt />;
        if (text.includes('blackout') || text.includes('cortina')) return <Umbrella />;
        if (text.includes('guarda-roupa') || text.includes('armário')) return <Warehouse />;
        if (text.includes('bluetooth') || text.includes('som')) return <Zap />;

        // Categoria: básico
        if (amenity.category?.toLowerCase().includes('básico')) return <Home />;
        // Categoria: segurança  
        if (amenity.category?.toLowerCase().includes('segurança')) return <Lock />;
        // Categoria: cozinha
        if (amenity.category?.toLowerCase().includes('cozinha')) return <ChefHat />;
        // Categoria: localização/exterior
        if (amenity.category?.toLowerCase().includes('localização') ||
            amenity.category?.toLowerCase().includes('exterior')) return <MapPin />;

        // Ícone padrão para outros casos
        return <Check />;
    };

    return (
        <div className="flex items-center space-x-2">
            <div className="w-6 h-6 flex-shrink-0 text-blue-500">
                {getIconComponent(amenity.text)}
            </div>
            <span className="text-sm text-gray-800">{amenity.text}</span>
        </div>
    );
};

export default function PropertiesPage(): JSX.Element {
    const { user, loading, signOut } = useAuthContext();
    const router = useRouter();
    const pathname = usePathname();
    const [username, setUsername] = useState<string>('');
    const [isProfileMenuOpen, setIsProfileMenuOpen] = useState<boolean>(false);
    const [properties, setProperties] = useState<Property[]>(sampleProperties);
    const [searchTerm, setSearchTerm] = useState<string>('');
    const [filterStatus, setFilterStatus] = useState<string>('all');
    const [showAddModal, setShowAddModal] = useState<boolean>(false);
    const [showEditModal, setShowEditModal] = useState<boolean>(false);
    const [currentProperty, setCurrentProperty] = useState<Property | null>(null);
    const [formData, setFormData] = useState<FormData>({
        id: '',
        title: '',
        description: '',
        type: '',
        location: '',
        price: 0,
        bedrooms: 0,
        bathrooms: 0,
        beds: 0,
        guests: 0,
        area: 0,
        status: 'available',
        featured: false,
        images: [],
        amenities: [],
        categorizedAmenities: {},
        houseRules: {
            checkIn: '',
            checkOut: '',
            maxGuests: 0,
            additionalRules: []
        },
        safety: {
            hasCoAlarm: false,
            hasSmokeAlarm: false,
            hasCameras: false
        },
        cancellationPolicy: 'Flexível'
    });
    const [showImportModal, setShowImportModal] = useState<boolean>(false);
    const [importUrl, setImportUrl] = useState<string>('');
    const [importError, setImportError] = useState<string | null>(null);
    const { importFromAirbnb, isLoading, error, progress } = useAirbnbImport();
    const [isImporting, setIsImporting] = useState<boolean>(false);
    const [importProgress, setImportProgress] = useState<ImportProgress>({ step: 0, total: 3, message: '' });
    const [importedData, setImportedData] = useState<any>(null);
    const [processedImages, setProcessedImages] = useState<ImageProcessingResult[]>([]);

    // Array de tipos de imóveis padrão
    const [propertyTypes, setPropertyTypes] = useState<string[]>([
        'Apartamento', 'Casa', 'Cobertura', 'Studio', 'Flat', 'Kitnet', 'Loft'
    ]);

    // Função para adicionar novos tipos de imóvel dinamicamente
    const addPropertyType = (newType: string) => {
        if (!propertyTypes.includes(newType) && newType.trim() !== '') {
            setPropertyTypes(prev => [...prev, newType]);
        }
    };

    useEffect(() => {
        if (!loading && !user) {
            router.push('/admin');
        } else if (user) {
            const email = user.email || '';
            setUsername(email.split('@')[0]);
        }
    }, [user, loading, router]);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as HTMLElement;
            if (!target.closest('.profile-menu-container')) {
                setIsProfileMenuOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    useEffect(() => {
        if (error) {
            setImportError(error);
        }
    }, [error]);

    useEffect(() => {
        if (progress.step > 0) {
            setImportProgress(progress);
        }
    }, [progress]);

    const handleSignOut = async () => {
        try {
            await signOut();
            deleteCookie('admin_session');
            router.push('/admin');
        } catch (error) {
            console.error('Erro ao fazer logout:', error);
        }
    };

    const filteredProperties = properties.filter(property => {
        const matchesSearch =
            property.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            property.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
            property.type.toLowerCase().includes(searchTerm.toLowerCase());

        const matchesFilter = filterStatus === 'all' || property.status === filterStatus;

        return matchesSearch && matchesFilter;
    });

    const handleAddProperty = () => {
        const newProperty: Property = {
            ...formData,
            id: (Math.random() * 1000000).toString(),
            amenities: formData.amenities || [],
            images: formData.images || [],
        };

        setProperties([...properties, newProperty]);
        resetForm();
        setShowAddModal(false);
    };

    const resetForm = () => {
        setFormData({
            id: '',
            title: '',
            description: '',
            type: '',
            location: '',
            price: 0,
            bedrooms: 0,
            bathrooms: 0,
            beds: 0,
            guests: 0,
            area: 0,
            status: 'available',
            featured: false,
            images: [],
            amenities: [],
            categorizedAmenities: {},
            houseRules: {
                checkIn: '',
                checkOut: '',
                maxGuests: 0,
                additionalRules: []
            },
            safety: {
                hasCoAlarm: false,
                hasSmokeAlarm: false,
                hasCameras: false
            },
            cancellationPolicy: 'Flexível'
        });
    };

    const handleEditProperty = (property: Property) => {
        setCurrentProperty(property);
        setFormData({
            id: property.id,
            title: property.title,
            description: property.description || '',
            type: property.type,
            location: property.location,
            price: property.price,
            bedrooms: property.bedrooms,
            bathrooms: property.bathrooms,
            beds: property.beds || 1,
            guests: property.guests || 2,
            area: property.area,
            status: property.status,
            featured: property.featured,
            images: property.images,
            amenities: property.amenities || [],
            categorizedAmenities: property.categorizedAmenities || {},
            houseRules: property.houseRules || {
                checkIn: '15:00',
                checkOut: '11:00',
                maxGuests: 2,
                additionalRules: [],
            },
            safety: property.safety || {
                hasCoAlarm: false,
                hasSmokeAlarm: false,
                hasCameras: false,
            },
            cancellationPolicy: property.cancellationPolicy || 'Flexível'
        });
        setShowEditModal(true);
    };

    const handleUpdateProperty = () => {
        if (!currentProperty) return;

        const updatedProperties = properties.map(p => {
            if (p.id === currentProperty.id) {
                return {
                    ...p,
                    title: formData.title as string,
                    price: formData.price as number,
                    location: formData.location as string,
                    type: formData.type as string,
                    bedrooms: formData.bedrooms as number,
                    bathrooms: formData.bathrooms as number,
                    area: formData.area as number,
                    status: formData.status as 'available' | 'rented' | 'maintenance',
                    images: formData.images as string[],
                    featured: formData.featured as boolean,
                    description: formData.description || '',
                    beds: formData.beds || 1,
                    guests: formData.guests || 2,
                    amenities: formData.amenities || [],
                    categorizedAmenities: formData.categorizedAmenities || {},
                    houseRules: formData.houseRules || {
                        checkIn: '15:00',
                        checkOut: '11:00',
                        maxGuests: 2,
                        additionalRules: [],
                    },
                    safety: formData.safety || {
                        hasCoAlarm: false,
                        hasSmokeAlarm: false,
                        hasCameras: false,
                    },
                    cancellationPolicy: formData.cancellationPolicy || 'Flexível'
                };
            }
            return p;
        });

        setProperties(updatedProperties);
        setShowEditModal(false);
    };

    const handleFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const { name, value, type } = e.target;

        setFormData(prev => ({
            ...prev,
            [name]: type === 'number' ? parseFloat(value) : value
        }));
    };

    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, checked } = e.target;

        setFormData(prev => ({
            ...prev,
            [name]: checked
        }));
    };

    // Helper function to handle amenity toggling
    const handleAmenityToggle = (amenity: string, checked: boolean) => {
        setFormData(prev => {
            const currentAmenities = prev.amenities || [];
            let updatedAmenities = [...currentAmenities];

            if (checked) {
                // Add if not already present
                if (!updatedAmenities.includes(amenity)) {
                    updatedAmenities.push(amenity);

                    // Quando adicionar nova comodidade, categorizar automaticamente
                    // Primeiro, criar um array com apenas a nova comodidade
                    const singleAmenityCategorized = categorizeAmenities([amenity]);

                    // Combinar com as categorias existentes
                    const updatedCategorizedAmenities = { ...prev.categorizedAmenities };

                    // Para cada categoria no resultado da categorização
                    Object.entries(singleAmenityCategorized).forEach(([category, amenities]) => {
                        // Se a categoria já existe no estado atual
                        if (updatedCategorizedAmenities[category]) {
                            // Adicionar a nova comodidade à categoria existente, evitando duplicatas
                            if (!updatedCategorizedAmenities[category].includes(amenity)) {
                                updatedCategorizedAmenities[category] = [
                                    ...updatedCategorizedAmenities[category],
                                    ...amenities
                                ];
                            }
                        } else {
                            // Se a categoria não existe, criá-la
                            updatedCategorizedAmenities[category] = [...amenities];
                        }
                    });

                    // Retornar o estado atualizado com as novas comodidades e categorias
                    return {
                        ...prev,
                        amenities: updatedAmenities,
                        categorizedAmenities: updatedCategorizedAmenities
                    };
                }
            } else {
                // Remover a comodidade da lista principal
                updatedAmenities = updatedAmenities.filter(item => item !== amenity);

                // Remover a comodidade de todas as categorias
                const updatedCategorizedAmenities = { ...prev.categorizedAmenities };

                Object.keys(updatedCategorizedAmenities).forEach(category => {
                    updatedCategorizedAmenities[category] = updatedCategorizedAmenities[category]
                        .filter(item => item !== amenity);

                    // Remover a categoria se ficar vazia
                    if (updatedCategorizedAmenities[category].length === 0) {
                        delete updatedCategorizedAmenities[category];
                    }
                });

                return {
                    ...prev,
                    amenities: updatedAmenities,
                    categorizedAmenities: updatedCategorizedAmenities
                };
            }

            // Caso a comodidade já exista no array, apenas retornar o state sem alterações
            return prev;
        });
    };

    const handleImageUpload = () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.multiple = true;
        input.onchange = (e: Event) => {
            const target = e.target as HTMLInputElement;
            if (target.files) {
                const newImages = Array.from(target.files).map(file => URL.createObjectURL(file));
                setFormData(prev => ({
                    ...prev,
                    images: [...prev.images, ...newImages]
                }));
            }
        };
        input.click();
    };

    const handleRemoveImage = (index: number) => {
        setFormData(prev => ({
            ...prev,
            images: prev.images.filter((_, i) => i !== index)
        }));
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'available':
                return 'Disponível';
            case 'rented':
                return 'Alugado';
            case 'maintenance':
                return 'Em Manutenção';
            default:
                return 'Desconhecido';
        }
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'available':
                return 'bg-green-100 text-green-800';
            case 'rented':
                return 'bg-blue-100 text-blue-800';
            case 'maintenance':
                return 'bg-orange-100 text-orange-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };

    const handleImportProperty = async () => {
        try {
            setIsImporting(true);
            setImportError(null);

            // Limpar dados importados antes de iniciar
            setImportedData(null);

            const result = await importFromAirbnb(importUrl);

            if (!result) {
                setImportError('Erro ao importar dados. Verifique a URL e tente novamente.');
                return;
            }

            console.log('Dados importados do Airbnb:', result);
            console.log('Imagens importadas:', result.images);

            // Processar as imagens antes de armazenar
            let processedImages = [];
            if (result.images && Array.isArray(result.images) && result.images.length > 0) {
                // Filtrar apenas URLs válidas e limitar a quantidade
                processedImages = result.images
                    .filter(url => typeof url === 'string' && (url.startsWith('http') || url.startsWith('/')))
                    .slice(0, 20); // Limitar a 20 imagens para performance

                console.log(`Processadas ${processedImages.length} imagens válidas:`, processedImages);

                // Se não temos imagens válidas, mostrar aviso
                if (processedImages.length === 0) {
                    console.warn('Nenhuma imagem válida encontrada no resultado do scraping');
                }
            } else {
                console.warn('Nenhuma imagem recebida do scraping');
            }

            // Armazenar os dados importados com imagens processadas
            const enhancedResult = {
                ...result,
                images: processedImages
            };

            console.log('Dados aprimorados para armazenar:', enhancedResult);
            setImportedData(enhancedResult);
        } catch (error) {
            console.error('Erro na importação:', error);
            setImportError('Ocorreu um erro durante a importação. Por favor, tente novamente.');
        } finally {
            setIsImporting(false);
        }
    };

    // Atualizar o método handleUseImportedData
    const handleUseImportedData = () => {
        if (!importedData) return;

        console.log('Processando dados importados para uso no formulário', importedData);
        console.log('Imagens importadas:', importedData.images);

        // Resetar o formulário para valores padrão
        resetForm();

        // Normalizar as URLs das imagens
        let processedImages = [];
        if (importedData.images && importedData.images.length > 0) {
            // Filtra apenas URLs válidas
            processedImages = importedData.images
                .filter(url => typeof url === 'string' && (url.startsWith('http') || url.startsWith('/')))
                .slice(0, 15); // Limitar a 15 imagens para não sobrecarregar

            console.log('URLs de imagens processadas:', processedImages);
        }

        // Normalizar comodidades
        const normalizedAmenities = normalizeAmenities(importedData.amenities || []);

        // Categorizar comodidades
        const categorizedAmenities = categorizeAmenities(normalizedAmenities);

        // Atualizar o estado do formulário com os dados importados
        setFormData(prev => ({
            ...prev,
            title: importedData.title || '',
            description: importedData.description || '',
            type: importedData.type || prev.type,
            location: importedData.address || importedData.location || '',
            price: importedData.pricePerNight || 0,
            bedrooms: importedData.bedrooms || 1,
            bathrooms: importedData.bathrooms || 1,
            beds: importedData.beds || 1,
            guests: importedData.guests || 2,
            amenities: normalizedAmenities,
            categorizedAmenities: categorizedAmenities,
            images: processedImages, // Usar as URLs processadas
            houseRules: {
                checkIn: importedData.houseRules?.checkIn || '15:00',
                checkOut: importedData.houseRules?.checkOut || '12:00',
                maxGuests: importedData.guests || 2,
                additionalRules: []
            },
            safety: {
                hasCoAlarm: normalizedAmenities.includes('Alarme de monóxido de carbono'),
                hasSmokeAlarm: normalizedAmenities.includes('Detector de fumaça'),
                hasCameras: normalizedAmenities.includes('Câmeras de segurança')
            }
        }));

        // Adicionar um pequeno atraso e verificar se as imagens foram adicionadas
        setTimeout(() => {
            console.log('Estado atual do formulário após importação:', formData);
            console.log('Imagens no formulário:', formData.images);
        }, 100);

        // Fechar o modal e limpar dados
        setShowImportModal(false);
        setImportUrl('');
        setImportedData(null);
    };

    // Para debugging - adicionamos uma verificação dos estados do componente
    React.useEffect(() => {
        if (formData.amenities && formData.amenities.length > 0) {
            console.log('useEffect detectou mudança em amenities:', formData.amenities);
            console.log('Número de amenities:', formData.amenities.length);
        }
    }, [formData.amenities]);

    const handleImageProcess = (url: string): ImageProcessingResult => {
        return {
            url,
            processed: true
        };
    };

    const handleImageRender = (img: string, index: number): JSX.Element => {
        return (
            <div key={index} className="relative">
                <Image src={img} alt={`Property image ${index + 1}`} width={300} height={200} />
            </div>
        );
    };

    return (
        <div
            className="min-h-screen relative"
            style={{
                backgroundImage: "url('/background-dashboard.jpg')",
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat'
            }}
        >
            <div className="absolute inset-0 bg-black bg-opacity-30 z-0"></div>
            <div className="relative z-10 min-h-screen">
                <header className="py-4">
                    <div className="max-w-7xl mx-auto px-6 sm:px-8 lg:px-10">
                        <div className="bg-white/30 backdrop-blur-lg rounded-full shadow-lg py-3 px-6 border border-white/20">
                            <div className="flex items-center relative">
                                <div className="flex-shrink-0">
                                    <Link href="/admin/dashboard" className="flex items-center">
                                        <span className="text-white text-3xl font-bold">Yallah</span>
                                    </Link>
                                </div>

                                <div className="absolute left-1/2 transform -translate-x-1/2">
                                    <nav className="hidden md:flex items-center rounded-full px-2 py-1">
                                        <Link
                                            href="/admin/dashboard"
                                            className="inline-flex items-center px-4 py-2 text-sm font-medium rounded-full hover:bg-opacity-80 transition-colors"
                                            style={{
                                                backgroundColor: pathname === '/admin/dashboard' ? '#8BADA4' : 'transparent',
                                                color: 'white'
                                            }}
                                        >
                                            <Home className="mr-2 h-5 w-5" />
                                            Home
                                        </Link>
                                        <Link
                                            href="/admin/dashboard/properties"
                                            className="inline-flex items-center px-4 py-2 text-sm font-medium rounded-full hover:bg-opacity-80 transition-colors"
                                            style={{
                                                backgroundColor: pathname === '/admin/dashboard/properties' ? '#8BADA4' : 'transparent',
                                                color: 'white'
                                            }}
                                        >
                                            <Building className="mr-2 h-5 w-5" />
                                            Imóveis
                                        </Link>
                                        <Link
                                            href="/admin/dashboard/support"
                                            className="inline-flex items-center px-4 py-2 text-sm font-medium rounded-full hover:bg-opacity-80 transition-colors"
                                            style={{
                                                backgroundColor: pathname === '/admin/dashboard/support' ? '#8BADA4' : 'transparent',
                                                color: 'white'
                                            }}
                                        >
                                            <MessageCircle className="mr-2 h-5 w-5" />
                                            Suporte
                                        </Link>
                                    </nav>
                                </div>

                                <div className="flex items-center ml-auto">
                                    <div className="mx-2">
                                        <button className="p-2 rounded-full bg-white/20 text-white hover:bg-white/30">
                                            <MessageCircle className="h-5 w-5" />
                                        </button>
                                    </div>

                                    <div className="mx-2">
                                        <button className="p-2 rounded-full bg-white/20 text-white hover:bg-white/30">
                                            <Bell className="h-5 w-5" />
                                        </button>
                                    </div>

                                    <div className="ml-4 relative flex items-center profile-menu-container">
                                        <div className="flex items-center cursor-pointer" onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}>
                                            <Image
                                                src="https://ui-avatars.com/api/?name=YA&background=DDDDDD&color=333333"
                                                alt="Avatar do Usuário"
                                                width={40}
                                                height={40}
                                                className="rounded-full border border-gray-200"
                                            />

                                            <div className="ml-3 mr-2">
                                                <p className="text-sm font-medium text-white">
                                                    {username || 'Yallah Admin'}
                                                </p>
                                                <p className="text-xs text-white/70">
                                                    {user?.email || 'yallah@yallah.com.br'}
                                                </p>
                                            </div>

                                            <ChevronDown className="h-4 w-4 text-white/70" />
                                        </div>

                                        <div className={`${isProfileMenuOpen ? 'block' : 'hidden'} absolute right-0 top-full mt-2 w-48 bg-white/90 backdrop-blur-lg rounded-md shadow-lg py-1 z-10 border border-white/20`}>
                                            <button
                                                className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-white/50 transition-colors"
                                                onClick={handleSignOut}
                                            >
                                                Sair
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </header>

                <main className="py-6">
                    <div className="max-w-7xl mx-auto px-6 sm:px-8 lg:px-10">
                        <div className="flex justify-between items-center mb-8">
                            <div>
                                <h1 className="text-2xl font-bold text-white mb-2">Gerenciamento de Imóveis</h1>
                                <p className="text-white/80">Gerencie os imóveis disponíveis na plataforma</p>
                            </div>
                            <button
                                onClick={() => setShowAddModal(true)}
                                className="inline-flex items-center px-4 py-2 bg-[#8BADA4] text-white rounded-lg hover:bg-opacity-90 transition-colors"
                            >
                                <Plus className="mr-2 h-5 w-5" />
                                Adicionar Imóvel
                            </button>
                        </div>

                        <div className="bg-white/25 backdrop-blur-lg rounded-xl shadow-lg p-4 mb-6 border border-white/20">
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                <div className="col-span-2 relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <Search className="h-5 w-5 text-gray-500" />
                                    </div>
                                    <input
                                        type="text"
                                        className="block w-full pl-10 pr-3 py-2 bg-white/20 border border-white/20 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                        placeholder="Buscar por título, local ou tipo..."
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                    />
                                </div>

                                <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <Filter className="h-5 w-5 text-gray-500" />
                                    </div>
                                    <select
                                        className="w-full pl-10 pr-3 py-2 bg-white/20 border border-white/20 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                        value={filterStatus}
                                        onChange={(e) => setFilterStatus(e.target.value)}
                                    >
                                        <option value="all">Todos os status</option>
                                        <option value="available">Disponível</option>
                                        <option value="rented">Alugado</option>
                                        <option value="maintenance">Em Manutenção</option>
                                    </select>
                                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                        <ChevronDown className="h-4 w-4 text-gray-500" />
                                    </div>
                                </div>

                                <div className="relative">
                                    <button className="w-full flex items-center justify-center px-4 py-2 bg-white/20 border border-white/20 rounded-lg text-gray-900 hover:bg-white/30 transition-colors">
                                        <ArrowUpDown className="h-5 w-5 mr-2" />
                                        <span>Ordenar</span>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredProperties.map(property => (
                                <div key={property.id} className="bg-white/25 backdrop-blur-lg rounded-xl shadow-lg overflow-hidden border border-white/20">
                                    <div className="relative h-48">
                                        <Image
                                            src={property.images[0] || '/placeholder-image.jpg'}
                                            alt={property.title}
                                            width={500}
                                            height={300}
                                            className="w-full h-full object-cover"
                                            onError={(e) => {
                                                const target = e.target as HTMLImageElement;
                                                target.onerror = null;
                                                target.src = '/placeholder-image.jpg';
                                            }}
                                        />
                                        {property.featured && (
                                            <div className="absolute top-2 left-2 bg-[#8BADA4] text-white text-xs font-bold px-2 py-1 rounded">
                                                Destaque
                                            </div>
                                        )}
                                        <div className="absolute top-2 right-2 flex space-x-2">
                                            <button
                                                onClick={() => handleEditProperty(property)}
                                                className="bg-white/80 p-2 rounded-full hover:bg-white transition-colors"
                                            >
                                                <Pencil className="h-4 w-4 text-gray-700" />
                                            </button>
                                            <button
                                                onClick={() => {
                                                    if (window.confirm('Tem certeza que deseja excluir este imóvel?')) {
                                                        setProperties(prevProperties => prevProperties.filter(p => p.id !== property.id));
                                                    }
                                                }}
                                                className="bg-white/80 p-2 rounded-full hover:bg-white transition-colors"
                                            >
                                                <Trash2 className="h-4 w-4 text-red-500" />
                                            </button>
                                        </div>
                                        <div className="absolute bottom-2 left-2">
                                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(property.status)}`}>
                                                {getStatusText(property.status)}
                                            </span>
                                        </div>
                                    </div>

                                    <div className="p-4">
                                        <h3 className="text-lg font-bold text-white truncate">{property.title}</h3>
                                        <div className="flex items-center mt-1 text-white/80">
                                            <MapPin className="h-4 w-4 mr-1" />
                                            <p className="text-sm">{property.location}</p>
                                        </div>
                                        <div className="flex items-center justify-between mt-4">
                                            <div className="flex items-center text-white/80">
                                                <DollarSign className="h-4 w-4" />
                                                <span className="text-lg font-bold text-white">R$ {property.price}</span>
                                                <span className="text-xs ml-1">/noite</span>
                                            </div>
                                            <div className="flex space-x-3">
                                                <div className="flex items-center text-white/70">
                                                    <BedDouble className="h-4 w-4 mr-1" />
                                                    <span className="text-xs">{property.bedrooms}</span>
                                                </div>
                                                <div className="flex items-center text-white/70">
                                                    <Bath className="h-4 w-4 mr-1" />
                                                    <span className="text-xs">{property.bathrooms}</span>
                                                </div>
                                                <div className="flex items-center text-white/70">
                                                    <Square className="h-4 w-4 mr-1" />
                                                    <span className="text-xs">{property.area}m²</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {filteredProperties.length === 0 && (
                            <div className="bg-white/25 backdrop-blur-lg rounded-xl shadow-lg p-8 text-center border border-white/20">
                                <Building className="h-12 w-12 text-white/50 mx-auto mb-4" />
                                <h3 className="text-xl font-medium text-white mb-2">Nenhum imóvel encontrado</h3>
                                <p className="text-white/70 mb-6">Não encontramos imóveis com os critérios selecionados.</p>
                                <button
                                    onClick={() => {
                                        setSearchTerm('');
                                        setFilterStatus('all');
                                    }}
                                    className="inline-flex items-center px-4 py-2 bg-[#8BADA4] text-white rounded-lg hover:bg-opacity-90 transition-colors"
                                >
                                    Limpar filtros
                                </button>
                            </div>
                        )}
                    </div>
                </main>
            </div>

            {showAddModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto p-4">
                    <div className="bg-white rounded-lg shadow-lg w-full max-w-4xl max-h-[90vh]">
                        <div className="p-6 overflow-y-auto" style={{ maxHeight: 'calc(90vh - 60px)' }}>
                            <div className="flex justify-between items-center mb-6">
                                <h2 className="text-xl font-semibold text-gray-800">Adicionar Novo Imóvel</h2>
                                <button
                                    onClick={() => setShowAddModal(false)}
                                    className="text-gray-500 hover:text-gray-700"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>

                            {/* Botão de importar do Airbnb */}
                            <div className="mb-6">
                                <button
                                    onClick={() => setShowImportModal(true)}
                                    className="flex items-center px-4 py-2 bg-[#8BADA4] text-white rounded-md hover:bg-opacity-90"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                        <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                                    </svg>
                                    Importar do Airbnb
                                </button>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <h4 className="font-medium text-gray-700 mb-4">Informações Básicas</h4>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Título do Imóvel *
                                        </label>
                                        <input
                                            type="text"
                                            name="title"
                                            value={formData.title}
                                            onChange={handleFormChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                            placeholder="Ex: Apartamento de luxo com vista panorâmica"
                                            required
                                        />
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Descrição
                                        </label>
                                        <textarea
                                            name="description"
                                            value={formData.description}
                                            onChange={handleFormChange}
                                            rows={4}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                            placeholder="Descreva o imóvel detalhadamente..."
                                        ></textarea>
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Tipo de Imóvel *
                                        </label>
                                        <select
                                            name="type"
                                            value={formData.type}
                                            onChange={handleFormChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                        >
                                            {propertyTypes.map((type) => (
                                                <option key={type} value={type}>{type}</option>
                                            ))}
                                        </select>
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Localização *
                                        </label>
                                        <input
                                            type="text"
                                            name="location"
                                            value={formData.location}
                                            onChange={handleFormChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                            placeholder="Ex: Brooklin, São Paulo"
                                            required
                                        />
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Status *
                                        </label>
                                        <select
                                            name="status"
                                            value={formData.status}
                                            onChange={handleFormChange}
                                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                        >
                                            <option value="available">Disponível</option>
                                            <option value="rented">Alugado</option>
                                            <option value="maintenance">Em Manutenção</option>
                                        </select>
                                    </div>
                                </div>

                                <div>
                                    <h4 className="font-medium text-gray-700 mb-4">Características e Preço</h4>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">
                                            Preço por Noite (R$) *
                                        </label>
                                        <div className="relative">
                                            <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">
                                                R$
                                            </span>
                                            <input
                                                type="number"
                                                name="price"
                                                value={formData.price}
                                                onChange={handleFormChange}
                                                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]"
                                                min="0"
                                                step="0.01"
                                                required
                                            />
                                        </div>
                                    </div>

                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Quartos
                                            </label>
                                            <div className="relative">
                                                <BedDouble className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                                                <input
                                                    type="number"
                                                    name="bedrooms"
                                                    value={formData.bedrooms}
                                                    onChange={handleFormChange}
                                                    className="pl-10 w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary sm:text-sm"
                                                    min="0"
                                                />
                                            </div>
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Banheiros
                                            </label>
                                            <div className="relative">
                                                <Bath className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                                                <input
                                                    type="number"
                                                    name="bathrooms"
                                                    value={formData.bathrooms}
                                                    onChange={handleFormChange}
                                                    className="pl-10 w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary sm:text-sm"
                                                    min="0"
                                                />
                                            </div>
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Camas
                                            </label>
                                            <div className="relative">
                                                <BedDouble className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                                                <input
                                                    type="number"
                                                    name="beds"
                                                    value={formData.beds}
                                                    onChange={handleFormChange}
                                                    className="pl-10 w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary sm:text-sm"
                                                    min="0"
                                                />
                                            </div>
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                                Hóspedes
                                            </label>
                                            <div className="relative">
                                                <UserCircle className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                                                <input
                                                    type="number"
                                                    name="guests"
                                                    value={formData.guests}
                                                    onChange={handleFormChange}
                                                    className="pl-10 w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary sm:text-sm"
                                                    min="0"
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    {/* Comodidades Dinâmicas para o modal de edição */}
                                    <div className="mb-6">
                                        <h4 className="font-medium text-gray-700 mb-2">Comodidades</h4>

                                        {!formData.categorizedAmenities || Object.keys(formData.categorizedAmenities).length === 0 && (
                                            <div className="mb-4 p-4 border border-dashed border-gray-300 rounded-md">
                                                <p className="text-sm text-gray-500 text-center">
                                                    Nenhuma comodidade encontrada. Use o botão abaixo para adicionar manualmente.
                                                </p>
                                            </div>
                                        )}

                                        {/* Render categorized amenities if available */}
                                        {formData.categorizedAmenities && Object.keys(formData.categorizedAmenities).length > 0 &&
                                            Object.keys(formData.categorizedAmenities).map((category) => {
                                                const amenities = formData.categorizedAmenities[category as keyof typeof formData.categorizedAmenities];
                                                if (!amenities || amenities.length === 0) return null;

                                                // Format category name for display
                                                const getCategoryDisplayName = (cat: string) => {
                                                    switch (cat) {
                                                        case 'basics': return 'Básicos';
                                                        case 'facilities': return 'Instalações';
                                                        case 'safety': return 'Segurança';
                                                        case 'kitchen': return 'Cozinha';
                                                        case 'location': return 'Localização';
                                                        case 'views': return 'Vistas';
                                                        case 'bathroom': return 'Banheiro';
                                                        case 'bedroom': return 'Quarto';
                                                        case 'entertainment': return 'Entretenimento';
                                                        case 'outdoor': return 'Área Externa';
                                                        case 'services': return 'Serviços';
                                                        default: return cat.charAt(0).toUpperCase() + cat.slice(1).replace(/_/g, ' ');
                                                    }
                                                };

                                                return (
                                                    <div key={`edit-cat-${category}`} className="mb-4">
                                                        <h5 className="text-sm text-gray-500 mb-2">{getCategoryDisplayName(category)}</h5>
                                                        <div className="grid grid-cols-2 gap-2">
                                                            {amenities.map((amenity, index) => (
                                                                <div key={`edit-cat-${category}-${index}`} className="flex items-center">
                                                                    <input
                                                                        type="checkbox"
                                                                        id={`edit-cat-${category}-${index}`}
                                                                        checked={formData.amenities.includes(amenity)}
                                                                        onChange={(e) => handleAmenityToggle(amenity, e.target.checked)}
                                                                        className="sr-only" // Esconder o checkbox original
                                                                    />
                                                                    <label
                                                                        htmlFor={`edit-cat-${category}-${index}`}
                                                                        className="flex items-center cursor-pointer"
                                                                    >
                                                                        <div className={`w-5 h-5 flex items-center justify-center rounded border mr-2 ${formData.amenities.includes(amenity)
                                                                            ? 'bg-[#8BADA4] border-[#8BADA4] text-white'
                                                                            : 'border-gray-300 bg-white'
                                                                            }`}>
                                                                            {formData.amenities.includes(amenity) && (
                                                                                <Check className="w-3 h-3" />
                                                                            )}
                                                                        </div>
                                                                        <PropertyAmenityItem amenity={{ text: amenity, category }} />
                                                                    </label>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>
                                                );
                                            })}

                                        {/* Botão para adicionar novas comodidades manualmente */}
                                        <div className="mt-4">
                                            <button
                                                type="button"
                                                onClick={() => {
                                                    const newAmenity = prompt('Digite o nome da nova comodidade:');
                                                    if (newAmenity && newAmenity.trim()) {
                                                        handleAmenityToggle(newAmenity.trim(), true);
                                                    }
                                                }}
                                                className="flex items-center px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                                            >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                                                </svg>
                                                Adicionar Comodidade
                                            </button>
                                        </div>
                                    </div>

                                    <div className="mb-6">
                                        <div className="flex items-center">
                                            <input
                                                type="checkbox"
                                                id="featured"
                                                name="featured"
                                                checked={formData.featured}
                                                onChange={handleCheckboxChange}
                                                className="h-4 w-4 text-[#8BADA4] focus:ring-[#8BADA4] border-gray-300 rounded"
                                            />
                                            <label htmlFor="featured" className="ml-2 block text-sm text-gray-700">
                                                Destacar este imóvel na plataforma
                                            </label>
                                        </div>
                                    </div>

                                    <div className="mb-4">
                                        <button
                                            type="button"
                                            onClick={handleImageUpload}
                                            className="flex items-center px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                                <path fillRule="evenodd" d="M4 5a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586a1 1 0 01-.707-.293l-1.121-1.121A2 2 0 0011.172 3H8.828a2 2 0 00-1.414.586L6.293 4.707A1 1 0 015.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd" />
                                            </svg>
                                            Adicionar Imagem
                                        </button>

                                        {formData.images.length > 0 && (
                                            <div className="mt-4 grid grid-cols-3 gap-4">
                                                {formData.images.map((img, index) => (
                                                    <div key={index} className="relative">
                                                        <div className="h-20 w-full bg-gray-200 rounded-md overflow-hidden">
                                                            <Image
                                                                src={img}
                                                                alt={`Imagem ${index + 1}`}
                                                                width={100}
                                                                height={80}
                                                                className="w-full h-full object-cover"
                                                                onError={(e) => {
                                                                    // Fallback se a imagem falhar ao carregar
                                                                    const target = e.target as HTMLImageElement;
                                                                    target.onerror = null;
                                                                    target.src = '/placeholder-image.jpg';
                                                                }}
                                                            />
                                                        </div>
                                                        <button
                                                            type="button"
                                                            onClick={() => handleRemoveImage(index)}
                                                            className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center"
                                                        >
                                                            &times;
                                                        </button>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>

                            <div className="border-t border-gray-200 mt-6 pt-6 flex justify-end space-x-4 sticky bottom-0 bg-white pb-1 z-10">
                                <button
                                    onClick={() => {
                                        resetForm();
                                        setShowEditModal(false);
                                    }}
                                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                                >
                                    Cancelar
                                </button>
                                <button
                                    onClick={handleUpdateProperty}
                                    className="px-6 py-2 bg-[#8BADA4] text-white rounded-lg hover:bg-opacity-90"
                                    disabled={!formData.title || !formData.location || formData.price <= 0}
                                >
                                    Salvar Alterações
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                    {showImportModal && (
                        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto p-4">
                            <div className="bg-white rounded-lg shadow-lg w-full max-w-md max-h-[90vh]">
                                <div className="p-6 overflow-y-auto" style={{ maxHeight: 'calc(90vh - 60px)' }}>
                                    <div className="flex justify-between items-center mb-6">
                                        <h2 className="text-xl font-semibold text-gray-800">
                                            {isImporting
                                                ? "Importando do Airbnb..."
                                                : importedData
                                                    ? "Dados Importados"
                                                    : "Importar do Airbnb"
                                            }
                                        </h2>
                                        <button
                                            onClick={() => {
                                                setShowImportModal(false);
                                                setImportedData(null);
                                            }}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>

                                    {/* Mostrar loader se estiver importando */}
                                    {isImporting && (
                                        <div>
                                            <p className="text-gray-600 mb-4">
                                                Importando dados do Airbnb. Isso pode levar alguns segundos...
                                            </p>

                                            <div className="flex items-center">
                                                <div className="w-full bg-gray-200 rounded-full h-2.5">
                                                    <div
                                                        className="bg-[#8BADA4] h-2.5 rounded-full transition-all duration-300"
                                                        style={{ width: `${(importProgress.step / importProgress.total) * 100}%` }}
                                                    ></div>
                                                </div>
                                                <span className="ml-2 text-sm text-gray-500 min-w-[60px]">{importProgress.step}/{importProgress.total}</span>
                                            </div>
                                            <div className="text-sm text-gray-500 mt-2 animate-pulse">
                                                {importProgress.message || 'Extraindo dados do Airbnb...'}
                                            </div>
                                        </div>
                                    )}

                                    {/* Mostrar dados importados */}
                                    {!isImporting && importedData && (
                                        <div>
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                                <div>
                                                    <p className="text-gray-700"><span className="font-medium">Título:</span> {importedData.title}</p>
                                                    <p className="text-gray-700"><span className="font-medium">Tipo:</span> {importedData.type || "Não especificado"}</p>
                                                    <p className="text-gray-700"><span className="font-medium">Preço por noite:</span> R$ {importedData.pricePerNight?.toFixed(2) || 0}</p>
                                                </div>
                                                <div>
                                                    <p className="text-gray-700"><span className="font-medium">Quartos:</span> {importedData.bedrooms || 1}</p>
                                                    <p className="text-gray-700"><span className="font-medium">Banheiros:</span> {importedData.bathrooms || 1}</p>
                                                    <p className="text-gray-700"><span className="font-medium">Hóspedes:</span> {importedData.guests || 1}</p>
                                                </div>
                                            </div>

                                            {/* Exibir as imagens */}
                                            {importedData.images && importedData.images.length > 0 && (
                                                <div className="mb-6">
                                                    <h4 className="text-md font-medium mb-2">Imagens encontradas: {importedData.images.length}</h4>
                                                    <div className="grid grid-cols-3 gap-2 mt-2">
                                                        {importedData.images.slice(0, 6).map((img: string, index: number) => (
                                                            <div key={index} className="relative h-20 bg-gray-200 rounded-md overflow-hidden">
                                                                <Image
                                                                    src={img}
                                                                    alt={`Imagem ${index + 1}`}
                                                                    width={100}
                                                                    height={80}
                                                                    className="w-full h-full object-cover"
                                                                    onError={(e) => {
                                                                        // Fallback se a imagem falhar ao carregar
                                                                        const target = e.target as HTMLImageElement;
                                                                        target.onerror = null;
                                                                        target.src = '/placeholder-image.jpg';
                                                                    }}
                                                                />
                                                            </div>
                                                        ))}
                                                    </div>
                                                    {importedData.images.length > 6 && (
                                                        <p className="text-xs text-gray-500 mt-2">
                                                            + {importedData.images.length - 6} imagens adicionais
                                                        </p>
                                                    )}
                                                </div>
                                            )}

                                            <div className="flex justify-end mt-6 space-x-4">
                                                <button
                                                    onClick={() => {
                                                        setImportedData(null);
                                                        setImportUrl('');
                                                    }}
                                                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                                                >
                                                    Cancelar
                                                </button>
                                                <button
                                                    onClick={handleUseImportedData}
                                                    className="px-6 py-2 bg-[#8BADA4] text-white rounded-lg hover:bg-opacity-90"
                                                >
                                                    Usar Estes Dados
                                                </button>
                                            </div>
                                        </div>
                                    )}

                                    {/* Mostrar formulário de URL se não estiver importando e não tiver dados importados */}
                                    {!isImporting && !importedData && (
                                        <div>
                                            <p className="text-gray-600 mb-4">
                                                Cole a URL do anúncio do Airbnb para importar os dados do imóvel automaticamente.
                                            </p>

                                            <div className="mb-6">
                                                <label htmlFor="importUrl" className="block text-gray-700 mb-2">URL do Airbnb</label>
                                                <input
                                                    type="text"
                                                    id="importUrl"
                                                    value={importUrl}
                                                    onChange={(e) => setImportUrl(e.target.value)}
                                                    placeholder="https://www.airbnb.com.br/rooms/12345678"
                                                    className={`w-full px-4 py-2 border ${importError ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-2 focus:ring-[#8BADA4]`}
                                                    disabled={isImporting}
                                                />
                                                {importError && (
                                                    <p className="text-red-500 text-sm mt-2">{importError}</p>
                                                )}
                                            </div>

                                            {/* Mostrar dicas para o usuário */}
                                            <div className="mb-6 bg-blue-50 p-3 rounded-md">
                                                <h4 className="text-sm font-medium text-blue-800 mb-1">Dicas:</h4>
                                                <ul className="text-xs text-blue-700 list-disc pl-4 space-y-1">
                                                    <li>Certifique-se de que o URL começa com "https://www.airbnb.com" ou "https://www.airbnb.com.br"</li>
                                                    <li>A importação pode levar alguns segundos, dependendo do tamanho da página</li>
                                                    <li>Após a importação, você ainda poderá editar os detalhes do imóvel</li>
                                                </ul>
                                            </div>

                                            <div className="flex justify-end space-x-4">
                                                <button
                                                    onClick={() => setShowImportModal(false)}
                                                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                                                    disabled={isImporting}
                                                >
                                                    Cancelar
                                                </button>
                                                <button
                                                    onClick={handleImportProperty}
                                                    className={`px-6 py-2 ${isImporting ? 'bg-[#8BADA4]/70' : 'bg-[#8BADA4]'} text-white rounded-lg hover:bg-opacity-90 flex items-center justify-center min-w-[140px]`}
                                                    disabled={isImporting || !importUrl.trim() || !importUrl.includes('airbnb')}
                                                >
                                                    {isImporting ? 'Importando...' : 'Importar Imóvel'}
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                    )}
                        </div>
                    )}
                </div>
            );
} 